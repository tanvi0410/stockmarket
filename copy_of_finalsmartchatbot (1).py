# -*- coding: utf-8 -*-
"""Copy of FinalSmartChatBot.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1QFQm8QtGb-3FM7z5x6JGeOcYxaSO8OUu
"""

!pip install quandl

import math 
import pandas_datareader as web 
import numpy as np 
import pandas as pd
from sklearn.preprocessing import MinMaxScaler
from keras.models import Sequential 
from keras.layers import Dense, LSTM
import matplotlib.pyplot as plt 
plt.style.use('fivethirtyeight')
import quandl 
import matplotlib.pyplot as plt
df = quandl.get("BSE/SENSEX", authtoken="4PyCC6Et5MAqoASv-xy8")
df

opening_price_today = df.iat[len(df)-1,0]
highest_price_today = df.iat[len(df)-1,1]
lowest_price_today = df.iat[len(df)-1,2]
closing_price_today = df.iat[len(df)-1,3]

opening_price = plt.plot(df.Open)
highest_price = plt.plot(df.High)
closing_price = plt.plot(df.Close)
lowest_price = plt.plot(df.Low)

df.shape

df

#Visualize the closing price history 
plt.figure(figsize-(16,8))
plt.title('Close Price History')
plt.plot(df['close'])
plt.xlabel('Data', fontsize=18)
plt.ylabel('Close Price INR (â‚¹)', fontsize=18)

from io import BytesIO

def display_plot(fig):
    # Convert the figure to a PNG image
    png_output = BytesIO()
    plt.savefig('png_output.png')
    
    # Return the image data
    png_output.seek(0)
    return png_output.read()

def generate_plot():
    plt.plot(df.Open)



pip install nltk

pip install newspaper3k

# Importing the Libraries
from newspaper import Article
import random 
import string
from nltk.tokenize import word_tokenize
from nltk.tokenize import sent_tokenize, LineTokenizer, SpaceTokenizer, BlanklineTokenizer
from nltk.stem import WordNetLemmatizer
lemmatizer = WordNetLemmatizer()
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.metrics.pairwise import cosine_similarity
import numpy as np
import warnings
from nltk import word_tokenize
warnings.filterwarnings('ignore')
ltokenise = LineTokenizer()
stokenise = SpaceTokenizer()

# Download the punkt package
import nltk
nltk.download('punkt', quiet = 'True')

with open('/content/Stock Market  (3).txt', 'r') as f:
    lines = f.read()
print(lines)

# article = Article("/content/Stock Market .txt")
# article.download()
# article.parse()
# article.nlp()
# corpus = article.text
# print(corpus)

# import spacy
# nlp = spacy.load("en_core_web_sm")
# nlp.pipe_names
# doc = nlp(corpus)
# for ent in doc.ents:
#   print(ent.text, "|", ent.label_, "|")

#Tokenization
text = lines
#print the list of sentences
sentences = BlanklineTokenizer().tokenize(text)
print(sentences)

#create a function that returns a random greeting response to the user's greeting
def greeting_response(text):
  text = text.lower()
  wTokenizer = word_tokenize(text)
  # print("Word Tokenizer ouput :",wTokenizer.tokenize(text))

  #Bot's greeting respsonse
  bot_greetings = ['howdy', 'hi', 'hey', 'heyyy', 'hello', 'hey there']

  #user's greeting
  user_greetings = ['hi', 'hello', 'hey', 'hola', 'bonjour', 'whats up']

  for word in text.split():
    if word in user_greetings:
      return random.choice(bot_greetings)    #this will return a random greeting from the array

def index_sort(list_var):
  lenght = len(list_var)
  list_index = list(range(0, lenght))

  x = list_var
  for i in range(lenght):
    for j in range(lenght):
      if x[list_index[i]] > x[list_index[j]]:
        #swap
        temp = list_index[i]
        list_index[i] = list_index[j]
        list_index[j] = temp
  return list_index

#Bot's response
def bot_response(user_input):
  user_input = user_input.lower()
  sentences.append(user_input)   #adds the user input to the sentence list
  bot_response = ''   
  cm = CountVectorizer().fit_transform(sentences)     
  similarity_scores = cosine_similarity(cm[-1], cm)   
  similarity_scores_list = similarity_scores.flatten()
  index = index_sort(similarity_scores_list)    
  index = index[1:]   
  response_flag = 0

  j = 0
  for i in range(len(index)):
    if similarity_scores_list[index[i]] > 0.0:
      bot_response = bot_response+ ' ' +sentences[index[i]]
      response_flag = 1
      j += 1
    if j > 2:
      break
    
  if response_flag == 0:
    bot_response = bot_response + ' ' + 'I apologise, I do not understand.'
  
  sentences.remove(user_input)


  return bot_response

#Start the chat
print('Hi there! Welcome to StockPredictions4U! I am StockTrek, your Stock Price Predicter. I am here to answer all your doubts. Type exit to exit') 

exit_list = ['exit','see you later', 'bye', 'quit', 'break', 'thankyou', 'thank you']

opening_stock_list = ['opening sensex prices', 'opening']
closing_stock_list = ['closing sensex prices', 'closing']
highest_stock_list = ['highest sensex prices', 'highest']
lowest_stock_list = ['lowest sensex prices', 'lowest']
today_prices = ['sensex today', 'today', 'now']

while(True):
  user_input = input()
  if user_input.lower() in opening_stock_list:
    fig = generate_plot()
    plot_image = display_plot(opening_price)
    break
  if user_input.lower() in closing_stock_list:
    fig = generate_plot()
    plot_image = display_plot(closing_price)
    break
  if user_input.lower() in highest_stock_list:
    fig = generate_plot()
    plot_image = display_plot(highest_price)
    break
  if user_input.lower() in lowest_stock_list:
    fig = generate_plot()
    plot_image = display_plot(lowest_price)
    break
  if user_input.lower() in exit_list:
    print('Okay! See you later!')
    break
  if user_input.lower() in today_prices:
    print(f'The opening price of sensex today is: {opening_price_today}')
    print(f'The closing price of sensex today is: {closing_price_today}')
    print(f'The highest price of sensex today is: {highest_price_today}')
    print(f'The lowest price of sensex today is: {lowest_price_today}')
    break
  else:
    if greeting_response(user_input) != None: 
      print(greeting_response(user_input))
    else:
      print(bot_response(user_input))